// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts/login": {
            "post": {
                "description": "Logs in a user with the provided username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login payload",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AccountLoginDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/handlers.AccountDetailsDTO"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}": {
            "get": {
                "description": "Retrieves the details of a specific account by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get account details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of account details",
                        "schema": {
                            "$ref": "#/definitions/handlers.AccountDetailsDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}/transactions": {
            "get": {
                "description": "Retrieves a list of transactions for a specific account by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get account transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of account transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.AccountTransactionDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "post": {
                "description": "Adds a new transaction to the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Add a new transaction",
                "parameters": [
                    {
                        "description": "Transaction request",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AccountDetailsDTO": {
            "type": "object",
            "properties": {
                "accountNumber": {
                    "type": "string"
                },
                "accountType": {
                    "type": "string"
                },
                "availableBalance": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "knownAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.KnownAccountDTO"
                    }
                },
                "person": {
                    "$ref": "#/definitions/handlers.PersonDTO"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.AccountLoginDTO": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.AccountTransactionDTO": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "otherAccountId": {
                    "type": "string"
                },
                "transactionType": {
                    "type": "string"
                }
            }
        },
        "handlers.KnownAccountDTO": {
            "type": "object",
            "properties": {
                "accountHolder": {
                    "type": "string"
                },
                "accountNumber": {
                    "type": "string"
                },
                "accountType": {
                    "type": "string"
                }
            }
        },
        "handlers.PersonDTO": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "handlers.TransactionRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "fromAccount": {
                    "type": "string"
                },
                "toAccount": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/backendAPI",
	Schemes:          []string{},
	Title:            "Wallet API",
	Description:      "This is a simple wallet API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
